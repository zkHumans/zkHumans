// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model log {
  id        Int      @id @default(autoincrement())
  type      String // [info,warn,error]
  message   Json
  createdAt DateTime @default(now())
}

model zkapp {
  address   String   @id // Base58 PublicKey of zkapp
  blockInit BigInt   @default(0) // first block height scanned for events
  blockLast BigInt   @default(0) // last block height scanned for events
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // relations
  stores store[]
}

model store {
  identifier String @id
  commitment String // root hash
  meta       Json?

  // relations
  data         storeData[]
  zkapp        zkapp       @relation(fields: [zkappAddress], references: [address], onDelete: Cascade, onUpdate: Cascade)
  zkappAddress String
  event        event       @relation(fields: [eventId], references: [id])
  eventId      Int
}

model storeData {
  id    Int     @id @default(autoincrement())
  key   String
  value String?
  meta  Json?

  // for pending data
  isPending          Boolean @default(true)
  commitmentPending  String? // zkApp's root hash this data proved against
  commitmentSettled  String? // zkApp's root hash this data settled within
  settlementChecksum String? // hashed expression of the data for validity

  // relations
  store   store  @relation(fields: [storeId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)
  storeId String
  event   event  @relation(fields: [eventId], references: [id])
  eventId Int

  @@unique([key, storeId])
}

model event {
  id          Int      @id @default(autoincrement())
  isProcessed Boolean  @default(false)
  createdAt   DateTime @default(now())

  // from the event
  type            String
  data            Json? // event.data
  transactionInfo Json // event.transactionInfo
  blockHeight     BigInt
  globalSlot      BigInt

  // relations
  storeData storeData[]
  store     store[]
}
